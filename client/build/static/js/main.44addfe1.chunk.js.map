{"version":3,"sources":["pages/Login.jsx","pages/Signup.jsx","Auth.js","components/graphqltest.jsx","Router.jsx","App.jsx","serviceWorker.js","config.js","index.js"],"names":["Login","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","Header","as","color","Form","size","Segment","stacked","Input","fluid","icon","iconPosition","placeholder","type","Button","Message","href","React","Component","Signup","jwt","token","localStorage","getItem","axios","post","then","res","isAuthenticated","data","response","isUsername","client_id","DATA","gql","Test","useQuery","loading","error","console","log","Router","props","exact","path","component","App","state","auth","className","Boolean","window","location","hostname","match","config","graphql","ApolloClient","uri","ReactDOM","render","client","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.44addfe1.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Form, Grid, Header, Image, Message, Segment } from 'semantic-ui-react'\n\nexport default class Login extends React.Component {\n\n\n\n    render(){\n        return(\n            <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n    <Grid.Column style={{ maxWidth: 450 }}>\n      <Header as='h2' color='teal' textAlign='center'>\n      {/* <Image src='/logo.png' /> */}\n         Log-in to your account\n      </Header>\n      <Form size='large'>\n        <Segment stacked>\n          <Form.Input fluid icon='user' iconPosition='left' placeholder='E-mail address' />\n          <Form.Input\n            fluid\n            icon='lock'\n            iconPosition='left'\n            placeholder='Password'\n            type='password'\n          />\n\n          <Button color='teal' fluid size='large'>\n            Login\n          </Button>\n        </Segment>\n      </Form>\n      <Message>\n        New to us? <a href='#signup'>Sign Up</a>\n      </Message>\n    </Grid.Column>\n  </Grid>\n        )\n    }\n\n}","import React from 'react';\nimport { Button, Form, Grid, Header, Image, Message, Segment } from 'semantic-ui-react'\n\nexport default class Signup extends React.Component {\n\n    render(){\n        return(\n            <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n    <Grid.Column style={{ maxWidth: 450 }}>\n      <Header as='h2' color='teal' textAlign='center'>\n      {/* <Image src='/logo.png' /> */}\n         Create an account\n      </Header>\n      <Form size='large'>\n        <Segment stacked>\n        <Form.Input fluid icon='user' iconPosition='left' placeholder='Firstname' />\n        <Form.Input fluid icon='user' iconPosition='left' placeholder='Lastname' />\n        <Form.Input fluid icon='user' iconPosition='left' placeholder='Username' />\n          <Form.Input fluid icon='user' iconPosition='left' placeholder='E-mail address' />\n          <Form.Input\n            fluid\n            icon='lock'\n            iconPosition='left'\n            placeholder='Password'\n            type='password'\n          />\n            <Form.Input\n            fluid\n            icon='lock'\n            iconPosition='left'\n            placeholder='Confirm Password'\n            type='password'\n          />\n\n          <Button color='teal' fluid size='large'>\n            Signup\n          </Button>\n        </Segment>\n      </Form>\n    </Grid.Column>\n  </Grid>\n        )\n    }\n\n}","\nimport axios from 'axios';\n\nconst Auth = {\n    isAuthenticated: false,\n    isUsername: \"\",\n    token: \"\",\n    async check() {\n        let jwt = {\n            token: \"\",\n        }\n        jwt.token = localStorage.getItem('sudo')\n        if (jwt !== \"\") {\n            await axios.post(`/verify`, jwt)\n                .then(res => {\n                    this.isAuthenticated = res.data.response\n                    this.isUsername = res.data.client_id\n                    this.token = jwt.token\n                })\n        }\n    },\n    getToken() {\n        return this.token\n    },\n    getAuth() {\n        // return this.isAuthenticated;\n        return true;\n    },\n    getUserName() {\n        return this.isUsername\n    },\n   signOutUser(){\n        localStorage.removeItem('sudo')\n        return false;\n    }\n\n};\n\nexport default Auth;","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\nconst DATA = gql`\n  {\n    song\n  }\n`;\n\n  function Test() {\n  const { loading, error, data } = useQuery(DATA);\n    console.log(data)\n    console.log(loading)\n return(\n     <div>\n\n     </div>\n )\n}\n\nexport default Test","import React from 'react';\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\n\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Auth from './Auth';\nimport Test from './components/graphqltest'\n\nconst Router = (props) => (\n\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/\" component={Test} />\n      <Route exact path=\"/login\" component={Login} />\n      <Route exact path=\"/signup\" component={Signup} />\n      {/* <PrivateRoute exact path=\"/edit-user\" component={Edit_User} /> */}\n    </Switch>\n  </HashRouter>\n\n)\n\n// const PrivateRoute = ({ component: Component, ...rest }) => (\n//   <Route\n//     {...rest}\n//     render={props =>\n//       Auth.getAuth() ? (\n//         <Component {...props} />\n//       ) : (\n//           <Redirect\n//             to={{\n//               pathname: \"/login\"\n//             }}\n//           />\n//         )\n//     }\n//   />\n// );\n\n\nexport default Router;","import React, { Component } from 'react';\nimport './styling/App.css';\nimport Router from './Router.jsx';\nimport { ApolloProvider } from '@apollo/react-hooks';\n// import Auth from './Auth'\n\n\nclass App extends Component {\n  state = {\n    auth: false,\n    loading: false\n  }\n\n  \n  // async componentDidMount() {\n  //   this.setState({ auth: await Auth.check(), loading: false })\n  // }\n  render() {\n      return (\n      <div className=\"App\">\n        <Router />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ApolloClient from 'apollo-boost';\nconst config ={\n\n    graphql: new ApolloClient({\n        uri: '/graphql',\n      })\n\n}\nexport default config","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport config from './config'\nimport { ApolloProvider } from '@apollo/react-hooks';\n\n// const { loading, error, data } = useQuery(DATA);\n// console.log(data)\n\n\nReactDOM.render(\n  <ApolloProvider client={config.graphql}>\n    <App />\n  </ApolloProvider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}