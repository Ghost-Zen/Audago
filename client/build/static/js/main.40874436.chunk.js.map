{"version":3,"sources":["api/typedefs.js","pages/Login.jsx","pages/Signup.jsx","pages/Search.jsx","components/card.jsx","pages/Webplayer.jsx","utils/Auth.js","pages/Profile.jsx","components/graphqltest.jsx","Router.jsx","components/navbar.jsx","App.jsx","utils/serviceWorker.js","config.js","index.js"],"names":["ADD_USER","gql","SEARCH_SONG","LOGIN_CHECK","Login","state","username","password","status","message","renderRedirect","to","renderError","Message","negative","Header","handleChange","event","setState","target","name","value","this","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","as","color","Form","size","Segment","stacked","Input","fluid","icon","iconPosition","placeholder","onChange","type","mutation","variables","update","cache","data","loginCheck","response","Button","onClick","href","React","Component","Signup","firstName","lastName","email","confirm","image","active","gql_res","createAccount","Search","search","loading","console","log","pathname","Container","JSON","parse","searchSong","runSearch","cards","props","handleShow","handleHide","intialPlayer","track","activeTrack","playTrack","index","content","primary","Dimmer","Dimmable","Image","dimmed","dimmer","onMouseEnter","onMouseLeave","src","Webplayer","song_data","location","x","document","querySelector","song","play","stopActiveTrack","renderData","songTiles","z","length","push","className","artwork","artist","undefined","margin","Card","Group","centered","itemsPerRow","id","controls","Auth","isAuthenticated","isUsername","token","check","jwt","localStorage","getItem","axios","post","then","res","client_id","getToken","getAuth","getUserName","signOutUser","removeItem","Profile","panes","menuItem","render","Tab","Pane","attached","Row","marginTop","width","floated","circular","menu","secondary","pointing","Test","PrivateRoute","component","rest","Router","exact","path","Navbar","activeItem","handleItemClick","e","userStatus","Menu","Item","children","position","App","auth","Boolean","window","hostname","match","config","graphql","ApolloClient","uri","ReactDOM","client","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.40874436.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\nexport const ADD_USER = gql`\n  mutation($firstName: String, $lastName: String, $username: String, $email:String, $password:String,$image:String,$active:Boolean) {\n   createAccount (firstName:$firstName, lastName:$lastName, username:$username, email:$email, password:$password,image:$image,active:$active){\n        response\n}\n    }\n`;\n\nexport const SEARCH_SONG = gql`\n  mutation($search:String) {\n   searchSong (search:$search){\n    response\n}\n    }\n`;\n\nexport const LOGIN_CHECK = gql`\n    mutation($username:String, $password:String) {\n      loginCheck (username:$username, password:$password){\n        response,\n        status\n      }\n    }\n`;\n\nexport const USER_DATA = gql`\n    mutation($username:String){\n      userData(username:$username){\n        response,\n        user,\n        status\n      }\n    }\n`;\n\nexport const DELETE_USER = gql`\n    mutation($username:String){\n      deleteUser (username:$username){\n        response,\n        status\n      }\n    }\n`;\n\nexport const UPDATE_USER = gql`  \n    mutation($username:String, $updateData:UpdateData){\n      updateUser(username:$username, updateData: $updateData){\n        response,\n        status\n      }\n    }\n`;\n\nexport const UPDATE_PASSWORD = gql`  \n    mutation($username:String, $currentPass:String, $newPass: String){\n      updatePassword(username:$username, currentPass:$currentPass, newPass:$newPass){\n        response,\n        status\n      }\n    }\n`;\n\nexport const NEW_PLAYLIST = gql`  \n    mutation($playlist:Playlist){\n      updateUser(playlist:$playlist){\n        response,\n        status\n      }\n    }\n`;\n\nexport const NEW_TRACK = gql`  \n    mutation($track:PlaylistTrack){\n      updateUser(track:$track){\n        response,\n        status\n      }\n    }\n`;\n\nexport const DELETE_TRACK = gql`  \n    mutation($track:PlaylistTrack){\n      updateUser(track:$track){\n        response,\n        status\n      }\n    }\n`;\n\nexport const FOLLOW_PLAYLIST = gql`  \n    mutation($username:String, $playlistName: String){\n      updateUser(username:$username, playlistName:$playlistName){\n        response,\n        status\n      }\n    }\n`;\n\nexport const UNFOLLOW_PLAYLIST = gql`  \n    mutation($username:String, $playlistName: String){\n      updateUser(username:$username, playlistName:$playlistName){\n        response,\n        status\n      }\n    }\n`;\n\nexport const USERS_PLAYLIST = gql`  \n    mutation($username:String){\n      updateUser(username:$username){\n        response,\n        list,\n        status\n      }\n    }\n`;","import React from 'react';\nimport { Button, Form, Grid, Header, Message, Segment } from 'semantic-ui-react';\nimport { LOGIN_CHECK } from '../api/typedefs';\nimport { Mutation } from 'react-apollo';\nimport { Redirect } from 'react-router-dom';\n\nexport default class Login extends React.Component {\n  state = {\n    username: '',\n    password: '',\n    status: false,\n    message: ''\n  }\n\n  renderRedirect = () => {\n    if (this.state.status) {\n      return <Redirect to='/' />\n    }\n  }\n\n  renderError = () => {\n    if (!this.state.status && this.state.message) {\n      return (<Message negative>\n        <Message.Header>{this.state.message}</Message.Header>\n      </Message>)\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  render() {\n    let { username, password } = this.state\n    return (\n      <Grid textAlign='center' style={{ height: '80vh' }} verticalAlign='middle'>\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as='h2' color='teal' textAlign='center'>\n            {/* <Image src='/logo.png' /> */}\n            Log-in to your account\n      </Header>\n          <Form size='large'>\n            <Segment stacked>\n              <Form.Input fluid icon='user' name='username' iconPosition='left' placeholder='E-mail address' onChange={this.handleChange} />\n              <Form.Input fluid icon='lock' name='password' iconPosition='left' placeholder='Password' type='password' onChange={this.handleChange} />\n              {this.renderRedirect()}\n              {this.renderError()}\n              <Mutation mutation={LOGIN_CHECK} variables={{ username, password }}\n                update={(cache, { data }) => {\n                  this.setState({\n                    status: data.loginCheck.status,\n                    message: data.loginCheck.response\n                  });\n                }\n                }\n              >\n                {loginCheck => (\n                  <Button type=\"submit\" color='teal' fluid size='large' onClick={loginCheck}>\n                    Login\n                  </Button>\n                )}\n              </Mutation>\n            </Segment>\n          </Form>\n          <Message>\n            New to us? <a href='#signup'>Sign Up</a>\n          </Message>\n        </Grid.Column>\n      </Grid>\n    )\n  }\n\n}","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Button, Form, Grid, Header, Segment } from 'semantic-ui-react';\nimport { ADD_USER } from '../api/typedefs';\nimport { Mutation } from 'react-apollo';\n\n\nexport default class Signup extends React.Component {\n  state = {\n    firstName: \"\",\n    lastName: \"\",\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirm: \"\",\n    image: \"\",\n    active: true,\n    gql_res: {\n      createAccount: {\n        response: false\n      }\n    }\n  }\n  \n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n\n  render() {\n    let { firstName, lastName, username, email, password, image, active } = this.state\n\n    if (this.state.gql_res.createAccount.response === \"Account created\") {\n      return <Redirect to=\"/\" />\n    }\n    return (\n      <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as='h2' color='teal' textAlign='center'>\n            {/* <Image src='/logo.png' /> */}\n            Create an account\n      </Header>\n          <Form size='large'>\n            <Segment stacked>\n              <Form.Input name='firstName' fluid icon='user' iconPosition='left' placeholder='Firstname' onChange={this.handleChange} />\n              <Form.Input name='lastName' fluid icon='user' iconPosition='left' placeholder='Lastname' onChange={this.handleChange} />\n              <Form.Input name='username' fluid icon='user' iconPosition='left' placeholder='Username' onChange={this.handleChange} />\n              <Form.Input name='email' fluid icon='mail' iconPosition='left' placeholder='E-mail address' onChange={this.handleChange} />\n              <Form.Input name='password' fluid icon='lock' iconPosition='left' placeholder='Password' type='password' onChange={this.handleChange} />\n              <Form.Input name='confirm' fluid icon='lock' iconPosition='left' placeholder='Confirm Password' type='password' onChange={this.handleChange} />\n              <Mutation mutation={ADD_USER} variables={{ firstName, lastName, username, email, password, image, active }}\n                update={(cache, { data }) => {\n                  this.setState({ gql_res: data })\n                }\n                }\n              >\n                {createAccount => (\n                  <Button type=\"submit\" color='teal' fluid size='large' onClick={createAccount}>\n                    Signup\n                  </Button>\n                )}\n              </Mutation>\n\n            </Segment>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    )\n  }\n\n}","import React from 'react';\nimport { Button, Form, Grid, Header, Segment,Container } from 'semantic-ui-react'\nimport { SEARCH_SONG } from '../api/typedefs';\nimport { Redirect } from 'react-router-dom';\nimport { Mutation } from 'react-apollo'\nexport default class Search extends React.Component {\n  state = {\n    search: \"\",\n    gql_res: \"\",\n    loading: false\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      search: event.target.value\n    })\n  }\n\n  render() {\n    let { search } = this.state\n    if(this.state.gql_res !== \"\"){\n      console.log(this.state.gql_res)\n      return(\n        <Redirect to={{pathname: '/webplayer',\n                  state: { data: this.state.gql_res }}} />\n        )\n    }\n    return (\n      <Container>\n      <Grid textAlign='center' style={{ height: '80vh' }} verticalAlign='middle'>\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as='h2' color='teal' textAlign='center'>\n            Search from over 30 million songs\n      </Header>\n          <Form size='large'>\n            <Segment stacked>\n              <Form.Input fluid icon='music' iconPosition='left' placeholder='Search Song' onChange={this.handleChange} />\n\n              <Mutation mutation={SEARCH_SONG} variables={{ search }}\n              update={(cache, { data }) => {\n                data = JSON.parse(data.searchSong.response)\n              this.setState({ gql_res: data,\n                              loading:true\n              })\n                }\n                }>\n                {runSearch => (\n                  <Button type=\"submit\" color='teal' fluid size='large' onClick={runSearch}>\n                    Search\n          </Button>\n                )}\n              </Mutation>\n            </Segment>\n          </Form>\n        </Grid.Column>\n      </Grid>\n      </Container>\n    )\n  }\n\n}","import React, { Component } from 'react'\nimport { Button, Dimmer, Image } from 'semantic-ui-react'\n\nexport default class cards extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n    }\n  }\n\n  handleShow = () => this.setState({ active: true })\n  handleHide = () => this.setState({ active: false })\n\n  intialPlayer = (track) => {\n    this.setState({activeTrack:track})\n    this.props.playTrack(track)\n  }\n\n  render() {\n    let {image,index} = this.props\n    const { active } = this.state\n    const content = (\n      <div>\n        {/* <Header as='h4' inverted>\n          {track}\n        </Header> */}\n\n        <Button primary icon=\"play\" onClick={() => this.intialPlayer(index)}></Button>\n        {/* <Button>View</Button> */}\n      </div>\n    )\n\n    return (\n      <Dimmer.Dimmable\n        as={Image}\n        dimmed={active}\n        dimmer={{ active, content }}\n        onMouseEnter={this.handleShow}\n        onMouseLeave={this.handleHide}\n        size='small'\n        src={image}\n      />\n    )\n  }\n}","import React from 'react';\nimport '../styling/App.css';\nimport { Redirect } from 'react-router-dom';\nimport { Container, Card } from 'semantic-ui-react';\nimport Cards from '../components/card';\n\nexport default class Webplayer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTrack: ''\n    }\n  }\n\n  playTrack = (track) => {\n    let song_data = this.props.location.state.data\n    let x = document.querySelector(\"#player\");\n    x.src = song_data[track].song\n    x.play();\n  }\n\n  stopActiveTrack = () => {\n\n  }\n\n  renderData = () => {\n    let song_data = this.props.location.state.data\n    let songTiles = [];\n    for (let z = 0; z < song_data.length; z++) {\n      songTiles.push(\n        <div className=\"cardDiv\">\n          <Cards image={song_data[z].artwork}\n            artist={song_data[z].artist}\n            track={song_data[z].track}\n            song={song_data[z].song}\n            playTrack={this.playTrack}\n            index={z}\n          /><br />\n          <strong>{song_data[z].track}</strong>\n        </div>\n      )\n    }\n    return songTiles\n  }\n\n  render() {\n    if (this.props.location.state === undefined) {\n      return <Redirect to=\"/\" />\n    } else {\n      return (\n        <div className=\"cardContainer\">\n          <Container style={{ margin: 15 }}>\n            <Card.Group centered itemsPerRow={6}>\n              {this.renderData()}\n            </Card.Group>\n          </Container>\n          <div className=\"audioPlayer\">\n            <audio id=\"player\" controls>\n              <source src=\"\" />\n            </audio>\n          </div>\n        </div>\n      )\n    }\n  }\n\n}","\nimport axios from 'axios';\n\nconst Auth = {\n    isAuthenticated: false,\n    isUsername: \"\",\n    token: \"\",\n    async check() {\n        let jwt = {\n            token: \"\",\n        }\n        jwt.token = localStorage.getItem('sudo')\n        if (jwt !== \"\") {\n            await axios.post(`/verify`, jwt)\n                .then(res => {\n                    this.isAuthenticated = res.data.response\n                    this.isUsername = res.data.client_id\n                    this.token = jwt.token\n                })\n        }\n    },\n    getToken() {\n        return this.token\n    },\n    getAuth() {\n    return true; //uncomment this for dev, to bypass authentication\n        // return this.isAuthenticated;\n    },\n    getUserName() {\n        return this.isUsername\n    },\n   signOutUser(){\n        localStorage.removeItem('sudo')\n        return false;\n    }\n\n};\n\nexport default Auth;","import React from 'react';\nimport { Image, Tab, Placeholder, Grid, Header, Divider } from 'semantic-ui-react';\n\n\nexport default class Profile extends React.Component {\n    render() {\n        const panes = [\n            {\n                menuItem: 'Playlists',\n                render: () => <Tab.Pane attached={false}>List of Playlists</Tab.Pane>,\n            },\n            {\n                menuItem: 'Settings',\n                render: () => <Tab.Pane attached={false}>Account details/ able to change account details</Tab.Pane>,\n            }\n        ]\n        return (\n            <Grid>\n                <Grid.Row style={{ marginTop: 15 }}>\n                    <Grid.Column width={16}>\n                        <Header as='h2'color='teal' floated='left'>\n                            <Image circular src='https://react.semantic-ui.com/images/avatar/large/patrick.png' /> Username\n                        </Header>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column width={16}>\n                        <Tab menu={{ secondary: true, pointing: true }} panes={panes} />\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n\n}","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\nconst DATA = gql`\n  {\n    test\n  }\n`;\n\n  function Test() {\n  const { data } = useQuery(DATA);\n    console.log(data)\n return(\n     <div>\n\n     </div>\n )\n}\n\nexport default Test","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Search from './pages/Search';\nimport Webplayer from './pages/Webplayer';\nimport Auth from './utils/Auth';\nimport { Redirect } from 'react-router-dom';\nimport Profile from './pages/Profile';\nimport Test from './components/graphqltest'\n\nconst Router = (props) => (\n\n  <HashRouter>\n    <Switch>\n    <Route exact path=\"/login\" component={Login} />\n      <Route exact path=\"/signup\" component={Signup} />\n      <Route exact path=\"/\" component={Search} />\n      <PrivateRoute exact path=\"/webplayer\" component={Webplayer} />\n      <Route exact path=\"/profile\" component={Profile} />\n      {/* <PrivateRoute exact path=\"/edit-user\" component={Edit_User} /> */}\n    </Switch>\n  </HashRouter>\n)\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      Auth.getAuth() ? (\n        <Component {...props} />\n      ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\"\n            }}\n          />\n        )\n    }\n  />\n);\n\n\nexport default Router;","import React, { Component } from 'react'\nimport { Input, Menu } from 'semantic-ui-react'\nimport Auth from '../utils/Auth'\n\nexport default class Navbar extends Component {\n  state = { activeItem: 'home' }\n\n  handleItemClick = (e, { name }) => {\n      this.setState({ activeItem: name })\n    }\n\n    userStatus = () => {\n        const { activeItem } = this.state\n        if(Auth.getAuth() === true){\n           return <Menu.Item\n            name='Welcome ____'\n            active={activeItem === 'greet'}\n            onClick={this.handleItemClick}\n          />\n        }else{\n           return <Menu.Item\n            name='login'\n            active={activeItem === 'login'}\n            onClick={this.handleItemClick}\n          />\n        }\n    }\n\n  render() {\n    const { activeItem } = this.state\n\n    return (\n      <Menu secondary\n      style={{ margin: 5 }} \n      >\n          <Menu.Header\n          style={{margin:5, color:'teal'}}\n          as=\"h2\"\n          children=\"Audago\"\n          />\n\n        <Menu.Item\n          name='home'\n          active={activeItem === 'home'}\n          onClick={this.handleItemClick}\n        />\n        <Menu.Item\n          name='playlist'\n          active={activeItem === 'playlist'}\n          onClick={this.handleItemClick}\n        />\n        <Menu.Item\n          name='about'\n          active={activeItem === 'about'}\n          onClick={this.handleItemClick}\n        />\n        <Menu.Menu position='right'>\n          <Menu.Item>\n            <Input icon='search' placeholder='Search...' />\n          </Menu.Item>\n          {this.userStatus()}\n        </Menu.Menu>\n      </Menu>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './styling/App.css';\nimport Router from './Router.jsx';\nimport { Container } from 'semantic-ui-react';\nimport Navbar from './components/navbar';\n// import Auth from './Auth'\n\n\nclass App extends Component {\n  state = {\n    auth: false,\n    loading: false\n  }\n\n  \n  // async componentDidMount() {\n  //   this.setState({ auth: await Auth.check(), loading: false })\n  // }\n  render() {\n      return (\n      <div className=\"App\">\n        <Container>\n        <Navbar />\n        <Router />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ApolloClient from 'apollo-boost';\nconst config ={\n\n    graphql: new ApolloClient({\n        uri: '/graphql',\n      })\n\n}\nexport default config","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styling/index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './utils/serviceWorker';\nimport config from './config'\nimport { ApolloProvider } from '@apollo/react-hooks';\n\n// const { loading, error, data } = useQuery(DATA);\n// console.log(data)\n\n\nReactDOM.render(\n  <ApolloProvider client={config.graphql}>\n    <App />\n  </ApolloProvider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}